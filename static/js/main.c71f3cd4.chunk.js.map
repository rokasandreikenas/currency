{"version":3,"sources":["App.js","index.js"],"names":["App","props","handleChange","target","setState","name","value","createChangeTable","state","isLoaded","table","children","push","key","currency","dataFrom","dataTo","courseChanged","createTable","rates","currenciesData","responseDoc","DOMParser","parseFromString","elements","getElementsByTagName","length","i","number","Math","floor","textContent","startDate","Date","endDate","bom","startValue","endValue","nameError","xmlData","startingDateChangeHandler","bind","endingDateChangeHandler","currencyCourseChanged","dataFromXml","this","loadData","toUpperCase","includes","alert","date","getMonth","getDate","getFullYear","formattedDate","dateFormater","changed","toFixed","currencyChecker","targetUrl","Request","url","console","log","fetch","then","res","text","result","error","e","preventDefault","data","Valiuta","Data","Santykis","className","onSubmit","type","onChange","placeholder","dateFormat","selected","datas","filename","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c71f3cd4.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport CsvDownloader from 'react-csv-downloader';\n\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      currency: 'AUD',\n      dataFrom: '',\n      dataTo: '',\n      startDate: new Date(),\n      endDate: new Date(),\n      bom: false,\n      isLoaded: false,\n      currenciesData: [],\n      startValue: '',\n      endValue: '',\n      courseChanged: '',\n      nameError: false,\n      xmlData: [],\n    }\n\n    this.startingDateChangeHandler = this.startingDateChangeHandler.bind(this);\n    this.endingDateChangeHandler = this.endingDateChangeHandler.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.currencyCourseChanged = this.currencyCourseChanged.bind(this);\n    this.dataFromXml = this.dataFromXml.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.startingDateChangeHandler(this.state.startDate);\n    this.endingDateChangeHandler(this.state.endDate);\n    this.loadData();\n    this.dataFromXml();\n  }\n\n  currencyChecker() {\n    let { currency } = this.state;\n    currency = currency.toUpperCase();\n\n    let allCurrencies = [\"AUD\", \"BGN\", \"BRL\", \"CAD\", \"CHF\", \"CNY\", \"CZK\",\n      \"DKK\", \"GBP\", \"HKD\", \"HRK\", \"HUF\", \"IDR\", \"ILS\", \"INR\", \"ISK\",\n      \"JPY\", \"KRW\", \"MXN\", \"MYR\", \"NOK\", \"NZD\", \"PHP\", \"PLN\", \"RUB\",\n      \"SEK\", \"SGD\", \"THB\", \"TRY\", \"USD\", \"ZAR\"]\n    if (currency === \"\") {\n      this.setState({\n        nameError: \"Please fill currency blank!\",\n\n      })\n    }\n\n    else if (allCurrencies.includes(currency)) {\n      this.setState({\n        nameError: false,\n        currency: currency\n      })\n      return true;\n    }\n    else {\n      alert(\"Wrong input! Use USD as example\")\n      return false;\n    }\n\n  }\n\n  dateFormater(date) {\n    let formattedDate\n    if (date != null) {\n      if (date.getMonth() + 1 < 10 && date.getDate() < 10) {\n        formattedDate = date.getFullYear() + \"-0\" + (date.getMonth() + 1) + \"-0\" + date.getDate()\n\n      }\n      else if (date.getDate() < 10) {\n        formattedDate = date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-0\" + date.getDate()\n      }\n      else if (date.getMonth() + 1 < 10) {\n        formattedDate = date.getFullYear() + \"-0\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n      }\n      else {\n        formattedDate = date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n      }\n      return formattedDate\n    }\n  }\n\n  startingDateChangeHandler(startDate) {\n    let formattedDate = this.dateFormater(startDate)\n    this.setState({\n      startDate: startDate,\n      dataFrom: formattedDate,\n    });\n  }\n\n  endingDateChangeHandler(endDate) {\n    let formattedDate = this.dateFormater(endDate)\n    this.setState({\n      endDate: endDate,\n      dataTo: formattedDate,\n    });\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({ [target.name]: target.value });\n  };\n\n  currencyCourseChanged() {\n    let responseDoc = new DOMParser().parseFromString(this.state.currenciesData, 'application/xml');\n    let elements = responseDoc.getElementsByTagName('Amt').length;\n    let startValue = responseDoc.getElementsByTagName('Amt')[1].textContent;\n    let endValue = responseDoc.getElementsByTagName('Amt')[elements - 1].textContent;\n    let changed = endValue - startValue;\n    changed = changed.toFixed(5);\n    this.setState({\n      courseChanged: changed\n    })\n  }\n\n  loadData() {\n    if (this.currencyChecker() !== true) {\n    }\n    else {\n      let proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n      let request = new Request(`https://lb.lt/webservices/FxRates/FxRates.asmx/getFxRatesForCurrency?tp=EU&ccy=${this.state.currency}&dtFrom=${this.state.dataFrom}&dtTo=${this.state.dataTo}`);\n      let targetUrl = request.url;\n      console.log(targetUrl)\n      fetch(proxyUrl + targetUrl) // CORS\n        .then(res => res.text())\n        .then(\n          result => {\n            this.setState({\n              isLoaded: true,\n              currenciesData: result,\n            });\n            this.createTable();\n            this.currencyCourseChanged();\n            this.dataFromXml();\n          },\n          error => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        );\n    }\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.loadData();\n  }\n\n  createChangeTable = () => {\n    if (this.state.isLoaded === true) {\n      let table = [];\n      let children = [];\n\n      children.push(\n        <tr key={0}>\n          <td>{this.state.currency}</td>\n          <td>{this.state.dataFrom}</td>\n          <td>{this.state.dataTo}</td>\n          <td>{this.state.courseChanged}</td>\n        </tr>\n      );\n\n      table.push(<tbody key={0}>{children}</tbody>); // We create the parent tbody tags and add the inner loop (children).\n\n      return table;\n    }\n\n  }\n\n  dataFromXml() {\n    if (this.state.isLoaded === true) {\n      const data = [];\n      let responseDoc = new DOMParser().parseFromString(this.state.currenciesData, 'application/xml');\n      let elements = responseDoc.getElementsByTagName('Amt').length;\n\n      for (let i = 1; i < elements; i = i + 2) {\n        let number = i / 2;\n        number = Math.floor(number)\n        console.log(number)\n        data.push({\n          Valiuta: responseDoc.getElementsByTagName('Ccy')[i].textContent,\n          Data: responseDoc.getElementsByTagName('Dt')[number].textContent,\n          Santykis: responseDoc.getElementsByTagName('Amt')[i].textContent\n        }\n        );\n      }\n      this.setState({\n        xmlData: data\n      })\n    }\n  }\n\n  createTable = () => {\n    if (this.state.isLoaded === true) {\n      const rates = this.state.currenciesData;\n      let table = [];\n      let children = [];\n\n      let responseDoc = new DOMParser().parseFromString(rates, 'application/xml');\n      let elements = responseDoc.getElementsByTagName('Amt').length;\n\n      for (let i = 1; i < elements; i = i + 2) {\n        let number = i / 2;\n        number = Math.floor(number)\n        children.push(\n          <tr key={number}>\n            <td>{responseDoc.getElementsByTagName('Ccy')[i].textContent}</td>\n            <td>{responseDoc.getElementsByTagName('Dt')[number].textContent}</td>\n            <td>{responseDoc.getElementsByTagName('Amt')[i].textContent}</td>\n          </tr>\n        );\n      }\n\n      table.push(<tbody key={0}>{children}</tbody>); // We create the parent tbody tags and add the inner loop (children).\n\n      return table;\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"App-body\">\n        <div className=\"center\">\n          <div className=\"currency-form\">\n            <form className=\"\" onSubmit={this.onSubmit.bind(this)}>\n              <div className=\"input-field\">\n                <input\n                  type=\"text\"\n                  name=\"currency\"\n                  value={this.state.currency}\n                  onChange={this.handleChange}\n                  placeholder=\"Valiutos pavadinimo santraupa\"\n                />\n                <span className=\"help-is-danger\">{this.state.nameError}</span>\n              </div>\n              <div className=\"input-field\">\n                <label>DATA NUO:</label>\n                <DatePicker\n                  dateFormat=\"yyyy-MM-dd\"\n                  selected={this.state.startDate}\n                  onChange={this.startingDateChangeHandler}\n                />\n              </div>\n              <div className=\"input-field\">\n                <label>DATA IKI:</label>\n                <DatePicker\n                  dateFormat=\"yyyy-MM-dd\"\n                  selected={this.state.endDate}\n                  onChange={this.endingDateChangeHandler}\n                />\n              </div>\n              <div className=\"get-currency-data-buttons\">\n                <button className=\"blue btn\" type=\"submit\" name=\"action\"><i className=\"material-icons right\">arrow_forward</i>Gauti duomenis</button>\n              </div>\n            </form>\n            <div className=\"get-currency-data-buttons\">\n              <CsvDownloader bom={this.state.bom} datas={this.state.xmlData} filename=\"currency.csv\">\n                <button onClick={this.dataFromXml} type=\"submit\" className=\"green btn-small\"><i className=\"material-icons right\">file_download</i>Atsisiųsti .CSV formatu</button>\n              </CsvDownloader>\n            </div>\n          </div>\n        </div>\n        <div className=\"\">\n          <table className=\"currency-table\">\n            <thead>\n              <tr>\n                <th>Valiutos kodas</th>\n                <th>Periodo pradžia</th>\n                <th>Periodo pabaiga</th>\n                <th>Pokytis</th>\n              </tr>\n            </thead>\n            {this.createChangeTable()}\n          </table>\n          <table className=\"currency-table\">\n            <thead>\n              <tr>\n                <th>Valiutos kodas</th>\n                <th>Data</th>\n                <th>Santykis</th>\n              </tr>\n            </thead>\n            {this.createTable()}\n          </table>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}